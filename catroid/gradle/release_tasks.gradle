/*
 * Catroid: An on-device visual programming system for Android devices
 * Copyright (C) 2010-2018 The Catrobat Team
 * (<http://developer.catrobat.org/credits>)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * An additional term exception under section 7 of the GNU Affero
 * General Public License, version 3, is available at
 * http://developer.catrobat.org/license_additional_term
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

import groovy.swing.SwingBuilder

final String releasePreparationMainGroup = "release preparation main"
final String releasePreparationSubGroup = "release preparation sub"

def loadSigningCredentials() {
    if (project.hasProperty("SigningKeystorePassword") && project.hasProperty("SigningKeyPassword")) {
        android.signingConfigs.release.storePassword = project.getProperties().get("SigningKeystorePassword")
        android.signingConfigs.release.keyPassword = project.getProperties().get("SigningKeyPassword")
    } else {
        logger.warn("Signing credentials not found.")
    }
}

task askForSigningPasswordsCLI {
    description "Ask for user-input to access keystore."
    group releasePreparationSubGroup

    doLast {
        def storePassword = new String(System.console().readPassword("Keystore password: "))
        def keyPassword  = new String(System.console().readPassword("Key password: "))

        android.signingConfigs.release.storePassword = storePassword
        android.signingConfigs.release.keyPassword = keyPassword
    }
}

task askForSigningPasswords {
    description "Ask for user-input to access keystore."
    group releasePreparationSubGroup

    def console = System.console()
    def storePassword
    def keyPassword

    doLast {
        if (console) {
            // use console if possible
            storePassword = new String(console.readPassword("\nKeystore password: "))
            keyPassword = new String(console.readPassword("Key password: "))
        } else {
            System.setProperty('java.awt.headless', 'false')
            // Gradle is running as a daemon - prompt user to enter passwords via popup UI
            new SwingBuilder().edt {
                dialog(modal: true, title: 'Enter credentials', alwaysOnTop: true, resizable: false,
                        locationRelativeTo: null, pack: true, show: true
                ) {
                    vbox {
                        label(text: "Keystore passphrase:")
                        textField id: "storeText", input = passwordField()
                        label(text: "Key passphrase:")
                        textField id: "keyText", input = passwordField()
                        button(defaultButton: true, text: 'OK', actionPerformed: {
                            storePassword = storeText.text;
                            keyPassword = keyText.text;
                            dispose();
                        })
                    }
                }
            }
        }
        android.signingConfigs.release.storePassword = storePassword
        android.signingConfigs.release.keyPassword = keyPassword
    }
}

tasks.whenTaskAdded { theTask ->
    if (theTask.name.equals("assembleCatroidRelease")) {
//        theTask.dependsOn "askForSigningPasswords"
        loadSigningCredentials()
    }
}
