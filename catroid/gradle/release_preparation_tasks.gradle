/*
 * Catroid: An on-device visual programming system for Android devices
 * Copyright (C) 2010-2018 The Catrobat Team
 * (<http://developer.catrobat.org/credits>)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * An additional term exception under section 7 of the GNU Affero
 * General Public License, version 3, is available at
 * http://developer.catrobat.org/license_additional_term
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

ext {
    crowdinPath = projectDir.parent + "/crowdin"
    crowdinKeyPath = crowdinPath + "/keyfile"
    crowdinArchivePath = crowdinPath + "/crowdin.zip"
    crowdinExtractedPath = crowdinPath + "/extracted"
    crowdinPlayStorePath = crowdinPath + "/extracted/catroid/PlayStore"
    fastlanePath = projectDir.parent + "/fastlane"
    fastlaneMetadataPath = fastlanePath + "/metadata"
    fastlaneAndroidPath = fastlanePath + "/metadata/android"

    playStoreLimitTitle = 50
    playStoreLimitShortDescription = 80
    playStoreLimitFullDescription = 4000
}

final String releasePreparationMainGroup = "release preparation main"
final String releasePreparationSubGroup = "release preparation sub"

def languageMapCrowdin = [
        // crowdin : Android
        "ar-rSA" : "ar",
        "az-rAZ" : "az-AZ",
        "bg-rBG" : "bg",
        "ca-rES" : "ca",
        "cs-rCZ" : "cs-CZ",
        "da-rDK" : "da-DK",
        "de-rDE" : "de-DE",
        "el-rGR" : "el-GR",
        "en-rAU" : "en-AU",
        "en-rCA" : "en-CA",
        "en-rGB" : "en-GB", // what about en-US
        "es-rES" : "es-ES",
        "fa-rAF" : "fa",
        "fr-rFR" : "fr-FR",
        "gl-rES" : "gl-ES",
        "hi-rIN" : "hi-IN",
        "hr-rHR" : "hr",
        "hu-rHU" : "hu-HU",
        "in-rID" : "id", // id-ID?
        "it-rIT" : "it-IT",
        "ja-rJP" : "ja-JP",
        "kn-rIN" : "kn-IN",
        "ko-rKR" : "ko-KR",
        "lt-rLT" : "lt",
        "mk-rMK" : "mk-MK",
        "ml-rIN" : "ml-IN",
        "ms-rMY" : "ms",
        "nl-rNL" : "nl-NL",
        "no-rNO" : "no-NO",
        "pl-rPL" : "pl-PL",
        "pt-rBR" : "pt-BR",
        "pt-rPT" : "pt-PT", // why marked remove in google doc?
        "ro-rRO" : "ro",
        "ru-rRU" : "ru-RU",
        "sk-rSK" : "sk",
        "sl-rSI" : "sl",
        "sr-rCS" : "sr",
        "sv-rSE" : "sv-SV",
        "sw-rKE" : "sw",
        "ta-rIN" : "ta-IN",
        "te-rIN" : "te-IN",
        "th-rTH" : "th",
        "tr-rTR" : "tr-TR",
        "uk-rUA" : "uk",
        "vi-rVN" : "vi",
        "zh-rCN" : "zh-CN",
        "zh-rTW" : "zh-TW"
]

def languageMapScreenshots = [
        // fastlane screenshot locales : Android
        "ar" : ["ar"],
        "az" : ["az-AZ"],
        "bg" : ["bg"],
        "ca" : ["ca"],
        "cs" : ["cs-CZ"],
        "da" : ["da-DK"],
        "de" : ["de-DE"],
        "el" : ["el-GR"],
        "en" : ["en-AU","en-CA", "en-GB"], // what about en-US
        "es" : ["es-ES"],
        "fa" : ["fa"],
        "fr" : ["fr-FR"],
        "gl" : ["gl-ES"],
        "hi" : ["hi-IN"],
        "hr" : ["hr"],
        "hu" : ["hu-HU"],
        "in" : ["id"], // id-ID?
        "it" : ["it-IT"],
        "ja" : ["ja-JP"],
        "kn" : ["kn-IN"],
        "ko" : ["ko-KR"],
        "lt" : ["lt"],
        "mk" : ["mk-MK"],
        "ml" : ["ml-IN"],
        "ms" : ["ms"],
        "nl" : ["nl-NL"],
        "no" : ["no-NO"],
        "pl" : ["pl-PL"],
        "pt" : ["pt-BR", "pt-PT"], // why "pt-PT" marked remove in google doc?
        "ro" : ["ro"],
        "ru" : ["ru-RU"],
        "sk" : ["sk"],
        "sl" : ["sl"],
        "sr" : ["sr"],
        "sv" : ["sv-SV"],
        "sw" : ["sw"],
        "ta" : ["ta-IN"],
        "te" : ["te-IN"],
        "th" : ["th"],
        "tr" : ["tr-TR"],
        "uk" : ["uk"],
        "vi" : ["vi"],
        "zh" : ["zh-CN", "zh-TW"]
]

String testLocales = "\"'ar', 'de-DE', 'en-US'\""

String getMappedLocalesCrowdin = languageMapCrowdin.values().inspect().toString()
        .replace("[", "\"")
        .replace("]", "\"")

String getMappedLocalesForScreenshots = languageMapScreenshots.values().collect { it ->
    "'" + it.first() + "'"
}.toString().replace("[", "\"").replace("]", "\"")

def createCrowdinDirectory() {
    final File crowdinDir = new File(crowdinPath)
    crowdinDir.mkdirs()
}

def createFastlaneDirectory() {
    final File faslaneDir = new File(fastlanePath)
    faslaneDir.mkdirs()
}

task cleanFastlane(type: Delete) {
    description "Delete objects in fastlane folder."
    group releasePreparationSubGroup

    delete fastlaneMetadataPath
    followSymlinks = true
}

task cleanCrowdin(type: Delete) {
    description "Delete objects in crowdin folder."
    group releasePreparationSubGroup

    delete crowdinExtractedPath, crowdinArchivePath
    followSymlinks = true
}

task downloadCrowdinFiles() {
    description "Downloads crowdin translations for App Store information."
    group releasePreparationSubGroup

    doLast {
        createCrowdinDirectory()
        String key = ""
        // TODO: Crowdin key is loaded from plaintext. Needs to be loaded from a secure storage.
        try {
            key = new File(project.ext.crowdinKeyPath).text
        } catch (IOException e) {
            logger.error("You have to provide the crowdin key in the following file " +
                    project.ext.crowdinKeyPath + ".")
            throw new GradleException("Crowdin keyfile not found")
        }

        logger.lifecycle("Downloading crowdin translations ...")
        exec {
            executable "sh"
            args ("-c", "wget -q --tries=3 --output-document=" + crowdinArchivePath +
                    " https://api.crowdin.com/api/project/catrobat/download/all.zip?key=" + key)
        }
        logger.lifecycle("Downloading crowdin translations done.")
    }
}

task unpackCrowdinFiles(type: Copy) {
    description "Unpacks the previously downloaded crowdin zip file."
    group releasePreparationSubGroup
    dependsOn downloadCrowdinFiles

    def zipFile = file(project.ext.crowdinArchivePath)
    def outputDir = file(project.ext.crowdinExtractedPath)

    doFirst { logger.lifecycle("Unpacking crowdin zip file ...") }
    from zipTree(zipFile)
    into outputDir
    doLast { logger.lifecycle( "Unpacking crowdin zip file done.") }
}

task generateAppStoreInfo {
    description "Generating App Store info files from local crowdin translations."
    group releasePreparationSubGroup
    dependsOn unpackCrowdinFiles

    doLast {
        logger.lifecycle("Generating App Store info files.")
        FileTree tree = fileTree(project.ext.crowdinPlayStorePath)
        tree.include "**/*.xml"

        tree.each { File file ->
            logger.info("Processing file: " + file)

            def directories = file.parent.split("/")
            String crowdinCode = directories[directories.size() - 1]
            String androidCode = languageMapCrowdin.get(crowdinCode)
            logger.info("Language code mapping: " + crowdinCode + " --> " + androidCode)

            if (androidCode != null) {
                def xml = new XmlParser().parse(file)

                File dirFile = new File(project.ext.fastlaneAndroidPath + "/" + androidCode)
                dirFile.mkdirs()

                String title = "${xml.string[0].text()}"
                if (title.length() > project.ext.playStoreLimitTitle) {
                    logger.warn("Title of " + crowdinCode + " is too long. Truncating to " +
                            project.ext.playStoreLimitTitle + " characters.")
                    title = title.take(project.ext.playStoreLimitTitle)
                }
                File titleFile = new File(project.ext.fastlaneAndroidPath + "/" + androidCode,
                        "title.txt")
                titleFile.text = title

                String fullDescription = "${xml.string[1].text()}"
                if (fullDescription.length() > project.ext.playStoreLimitFullDescription) {
                    logger.warn("Full description of " + crowdinCode + " is too long. Truncating to " +
                            project.ext.playStoreLimitFullDescription + " characters.")
                    fullDescription = fullDescription.take(project.ext.playStoreLimitFullDescription)
                }
                File fullDescriptionFile = new File(project.ext.fastlaneAndroidPath + "/" +
                        androidCode, "full_description.txt")
                fullDescriptionFile.text = fullDescription

                String shortDescription = "${xml.string[2].text()}"
                if (shortDescription.length() > project.ext.playStoreLimitShortDescription) {
                    logger.warn("Short description of " + crowdinCode + " is too long. Truncating to " +
                            project.ext.playStoreLimitShortDescription + " characters.")
                    shortDescription = shortDescription.take(project.ext.playStoreLimitShortDescription)
                }
                File shortDescriptionFile = new File(project.ext.fastlaneAndroidPath + "/" +
                        androidCode, "short_description.txt")
                shortDescriptionFile.text = shortDescription
            }
        }
        logger.lifecycle("Generating App Store info done.")
    }
}

task makeScreenshotsPocketCode(type:Exec) {
    description "Creates Screenshots for the App Store with Fastlane/Screengrab."
    group releasePreparationSubGroup
    dependsOn "assembleDebug", "assembleAndroidTest"

    workingDir projectDir.parent

    String fastlaneCommand = "fastlane screengrab" +
            " --app_package_name 'org.catrobat.catroid'" +
            " --use_tests_in_packages 'org.catrobat.catroid.screenshots'" +
            " --app_apk_path './catroid/build/outputs/apk/catroid/debug/catroid-catroid-debug.apk'" +
            " --tests_apk_path './catroid/build/outputs/apk/androidTest/catroid/debug/catroid-catroid-debug-androidTest.apk'" +
            " --test_instrumentation_runner 'android.support.test.runner.AndroidJUnitRunner'" +
            " --clear_previous_screenshots true " +
            " --exit_on_test_failure false " +
            " --locales " + getMappedLocalesForScreenshots
//            " --locales " + testLocales

    doFirst { logger.lifecycle("Taking screenshots for App Store ...") }
    executable "sh"
    args("-c", fastlaneCommand)
    doLast { logger.lifecycle("Taking screenshots for App Store done.") }
}

task renameScreenshotFolders() {
    description "Rename Screenshot folders to match Play Store locales."
    group releasePreparationSubGroup

    doLast {
        logger.lifecycle("Renaming screenshot folders.")

        new File(project.ext.fastlaneAndroidPath).eachDir() { dir ->
            def directories = dir.getPath().split("/")
            String localesCode = directories[directories.size()-1]
            def androidCodes = languageMapScreenshots.get(localesCode)
            logger.info("Language code mapping: " + localesCode + " --> " + androidCodes)

            if (androidCodes != null && androidCodes[0] != localesCode) {
                androidCodes.each { androidCode ->
                    logger.lifecycle("Copying files with local code '" + localesCode +
                            "' to '" + androidCode + "'.")

                    ant.copy (todir: project.ext.fastlaneAndroidPath + "/" + androidCode) {
                        fileset(dir: dir.getPath())
                    }
                }
                delete dir
            }
        }
        logger.lifecycle("Renaming screenshot folders done.")
    }
}

task uploadMetadataToPlayStore(type:Exec) {
    description "Uploads the fastlane metadata folder to Goggle Play Store."
    group releasePreparationMainGroup

    workingDir projectDir.parent

    doFirst { logger.lifecycle("Uploading Metadata to Play Store ...") }
    executable "sh"
//    args("-c", "fastlane android Metadata_Catroid")
    args("-c", " ")
    doLast { logger.lifecycle("Uploading Metadata to Play Store done.") }
}

task uploadAPKToPlayStore(type:Exec) {
    description "Uploads the Catroid APK to Goggle Play Store."
    group releasePreparationMainGroup

    workingDir projectDir.parent

    doFirst { logger.lifecycle("Uploading Metadata to Play Store ...") }
    executable "sh"
//    args("-c", "fastlane android APK_Catroid")
    args("-c", " ")
    doLast { logger.lifecycle("Uploading Metadata to Play Store done.") }
}

task prepareMetadata() {
    description "Run all taks to prepare files for the Metadata folder."
    group releasePreparationMainGroup
    dependsOn downloadCrowdinFiles , unpackCrowdinFiles
    dependsOn generateAppStoreInfo
    dependsOn makeScreenshotsPocketCode, renameScreenshotFolders

    doLast {
        logger.lifecycle("Preparing Metadata done.")
        logger.lifecycle("Path: " + project.ext.fastlaneMetadataPath)
    }
}

unpackCrowdinFiles.mustRunAfter(downloadCrowdinFiles)
generateAppStoreInfo.mustRunAfter(unpackCrowdinFiles)
makeScreenshotsPocketCode.shouldRunAfter(unpackCrowdinFiles)
renameScreenshotFolders.mustRunAfter(makeScreenshotsPocketCode)
uploadMetadataToPlayStore.mustRunAfter(generateAppStoreInfo, renameScreenshotFolders)
uploadAPKToPlayStore.mustRunAfter(uploadMetadataToPlayStore)

task testParam() {
    description "test"
    group releasePreparationSubGroup

    // pass argument via commandline e.g. "./gradlew -Ptestarg='hello' testParam"
    doLast{
        if (project.hasProperty("testarg")) {
            println project.testarg
        }
        else {
            println "No argument given"
        }
    }
}
