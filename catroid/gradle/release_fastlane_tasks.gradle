/*
 * Catroid: An on-device visual programming system for Android devices
 * Copyright (C) 2010-2018 The Catrobat Team
 * (<http://developer.catrobat.org/credits>)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * An additional term exception under section 7 of the GNU Affero
 * General Public License, version 3, is available at
 * http://developer.catrobat.org/license_additional_term
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

project.ext {
    fastlanePath = projectDir.parent + "/fastlane"
    fastlaneMetadataPath = fastlanePath + "/metadata"
    fastlaneAndroidPath = fastlanePath + "/metadata/android"
}

final String releasePreparationMainGroup = "release preparation main"
final String releasePreparationSubGroup = "release preparation sub"

def languageMapScreenshots = [
        // fastlane screenshot locales : Android
        "in" : ["id"],
]

String testLocales = "\"'ar', 'de-DE', 'en-US'\""

String getMappedLocalesForScreenshots = languageMapScreenshots.values().collect { it ->
    "'" + it.first() + "'"
}.toString().replace("[", "\"").replace("]", "\"")

def createFastlaneDirectory() {
    final File faslaneDir = new File(fastlanePath)
    faslaneDir.mkdirs()
}

task cleanFastlane(type: Delete) {
    description "Delete objects in fastlane folder."
    group releasePreparationSubGroup

    delete fastlaneMetadataPath
    followSymlinks = true
}

task makeScreenshotsPocketCode(type:Exec) {
    description "Creates Screenshots for the App Store with Fastlane/Screengrab."
    group releasePreparationSubGroup
    dependsOn "assembleAndroidTest"

//    workingDir projectDir.parent
    workingDir project.rootDir()

    String assembleCommand = "./gradlew assembleCatroidDebug -PuseAndroidLocales=true"

    String fastlaneCommand = "fastlane screengrab" +
            " --app_package_name 'org.catrobat.catroid'" +
            " --use_tests_in_packages 'org.catrobat.catroid.screenshots.catroid'" +
            " --app_apk_path './catroid/build/outputs/apk/catroid/debug/catroid-catroid-debug.apk'" +
            " --tests_apk_path './catroid/build/outputs/apk/androidTest/catroid/debug/catroid-catroid-debug-androidTest.apk'" +
            " --test_instrumentation_runner 'android.support.test.runner.AndroidJUnitRunner'" +
            " --clear_previous_screenshots true " +
            " --exit_on_test_failure false " +
//            " --locales " + testLocales
            " --locales " + project.ext.getMappedLocalesCrowdin

    doFirst { logger.lifecycle("Taking screenshots for App Store ...") }
    executable "sh"
    args("-c", assembleCommand + ";" + fastlaneCommand)
    doLast { logger.lifecycle("Taking screenshots for App Store done.") }
}

task renameScreenshotFolders() {
    description "Rename Screenshot folders to match Play Store locales."
    group releasePreparationSubGroup

    doLast {
        logger.lifecycle("Renaming screenshot folders.")

        new File(project.ext.fastlaneAndroidPath).eachDir() { dir ->
            def directories = dir.getPath().split("/")
            String localesCode = directories[directories.size()-1]
            def androidCodes = languageMapScreenshots.get(localesCode)

            if (androidCodes != null && androidCodes[0] != localesCode) {
                androidCodes.each { androidCode ->
                    logger.lifecycle("Copying files with local code '" + localesCode +
                            "' to '" + androidCode + "'.")

                    ant.copy (todir: project.ext.fastlaneAndroidPath + "/" + androidCode) {
                        fileset(dir: dir.getPath())
                    }
                }
                delete dir
            }
        }
        logger.lifecycle("Renaming screenshot folders done.")
    }
}

task generateScreenshotsPocketCode() {
    description "Run all tasks to generate Screenshots for the App Store."
    group releasePreparationMainGroup
    dependsOn makeScreenshotsPocketCode, renameScreenshotFolders

    doLast {
        logger.lifecycle("Generating Screenshots done.")
        logger.lifecycle("Path: " + project.ext.fastlaneMetadataPath)
    }
}

task uploadMetadataToPlayStore(type:Exec) {
    description "Uploads the fastlane metadata folder to Goggle Play Store."
    group releasePreparationMainGroup

//    workingDir projectDir.parent
    workingDir project.rootDir()

    doFirst { logger.lifecycle("Uploading Metadata to Play Store ...") }
    executable "sh"
    args("-c", "fastlane android upload_Metadata_Catroid")
    doLast { logger.lifecycle("Uploading Metadata to Play Store done.") }
}

task uploadAPKToPlayStore(type:Exec) {
    description "Uploads the Catroid APK to Goggle Play Store."
    group releasePreparationMainGroup

    workingDir projectDir.parent

    doFirst { logger.lifecycle("Uploading Metadata to Play Store ...") }
    executable "sh"
    args("-c", "fastlane android upload_APK_Catroid")
    doLast { logger.lifecycle("Uploading Metadata to Play Store done.") }
}

makeScreenshotsPocketCode.shouldRunAfter(unpackCrowdinFiles)
renameScreenshotFolders.mustRunAfter(makeScreenshotsPocketCode)
uploadMetadataToPlayStore.mustRunAfter(generateAppStoreInfo, renameScreenshotFolders)
uploadAPKToPlayStore.mustRunAfter(uploadMetadataToPlayStore)
